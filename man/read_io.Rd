% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_io.R
\name{read_io}
\alias{read_io}
\title{Read LPJmL input and output files}
\usage{
read_io(
  file_name,
  file_type = "meta",
  band_names = NULL,
  nstep = NULL,
  timestep = NULL,
  subset_list = list(),
  dim_order = c("cell", "time", "band"),
  version = NULL,
  order = NULL,
  firstyear = NULL,
  nyear = NULL,
  firstcell = NULL,
  ncell = NULL,
  nbands = NULL,
  cellsize_lon = NULL,
  scalar = NULL,
  cellsize_lat = NULL,
  datatype = NULL,
  endian = NULL,
  variable = NULL,
  descr = NULL,
  unit = NULL,
  name = NULL,
  silent = FALSE
)
}
\arguments{
\item{file_name}{Mandatory character string giving the file name to read,
including its path and extension. If \code{file_type = "meta"}, \code{file_name}
must be a json file.}

\item{file_type}{Mandatory character string giving the file type. Valid
options:
"raw", a binary file without header;
"clm", a binary file with header;
"meta" (default), a raw or clm file complemented by a meta-information json
file.}

\item{band_names}{Optional vector of character strings providing the band
names or NULL. Determined automatically from the metafile in case of
\code{file_type = "meta"}.}

\item{nstep}{Integer value defining the number of within-year time steps of
the file. Valid values are 1 (yearly), 12 (monthly), 365 (daily). Defaults to
1 if not read from file ("clm" or "meta" file) or provided by user.}

\item{timestep}{Integer value providing the interval in years between years
represented in file data. Normally 1, but LPJmL also allows averaging annual
outputs over several years. Defaults to 1 if not read from file
("clm" or "meta" file) or provided by user.}

\item{subset_list}{Optional list allowing to subset data read from file along
one or several of its dimensions. See details for more information.}

\item{dim_order}{Order of dimensions in returned LpjmlData object. Must be
a character vector containing all of the following in any order: "cell",
"band", "time". Select the order most useful to your further data processing.}

\item{version}{Integer indicating CLM-file header version, currently supports
one of 1, 2, 3 or 4.}

\item{order}{Integer value or character string describing the order of data
items in the file (default in input file: 1; in output file: 4). Valid values
for LPJmL input/output files are "cellyear" 1, "yearcell" 2, "cellindex" 3,
"cellseq" 4, although only options 1 and 4 are supported by this function.}

\item{firstyear}{Integer providing first year of data in the file.}

\item{nyear}{Integer providing number of years of data included in the file.
These are  not consecutive in case of \code{timestep > 1}.}

\item{firstcell}{Integer providing cell index of first data item. 0 by default.}

\item{ncell}{Integer providing number of data items per band.}

\item{nbands}{Integer providing number of bands per time step of data.}

\item{cellsize_lon}{Numeric value providing longitude cell size in deg.}

\item{scalar}{Numeric value providing conversion factor that needs to be
applied to raw data when reading it from file to derive final values.}

\item{cellsize_lat}{Numeric value providing latitude cell size in deg.}

\item{datatype}{Integer value or character string describing LPJmL data type
in file. Supported options: "byte" 0, "short" 1, "int" 2, "float" 3,
"double" 4.}

\item{endian}{Endianness to use for file (either "big" or "little"). By
default uses endianness set in file header or meta information or
platform-specific endianness \code{.Platform$endian} if not set.}

\item{variable}{Optional character string providing name of variable
contained in file. Included in some JSON meta files.}

\item{descr}{Optional character string providing a more detailed description
of variable contained in file. Included in some JSON meta files.}

\item{unit}{Optional character string providing unit of data in file.
Included in some JSON meta files.}

\item{name}{Optional character string specifying header name. This is usually
read from CLM headers for \code{file_type = "clm"} but can be specified for the
other \code{file_type} options.}

\item{silent}{If set to TRUE, suppresses most warnings or messages. Use only
after testing that function works as expected with the files it is being used
on. Default: FALSE.}
}
\value{
Object of class LpjmlData
}
\description{
Generic function to read LPJmL input & output files in different
formats. Depending on the format, arguments can be automatically detected,
or have to be passed on as individual arguments.
}
\details{
The \code{file_type} determines which arguments are mandatory, optional,
or not allowed. \code{file_name} and \code{file_type} must always be provided.

In case of \code{file_type = "meta"}, function arguments not listed as "mandatory"
will be ignored if they are already set in the JSON file. Only meta
attributes not set in the JSON file can be added.

In case of \code{file_type = "clm"}, function arguments not listed as "optional"
are normally determined automatically from the file header included in the
CLM file. Users may still provide any of these arguments to overwrite values
read from the file header, e.g. when they know that the values in the file
header are wrong. Also, CLM headers with versions < 4 do not contain all
header attributes, with missing attributes filled by default values that may
not be correct for all files.

In case of \code{file_type = "raw"}, files do not contain any information about
their structure. Users should provide all arguments not listed as "optional".
Otherwise default values valid for LPJmL standard outputs are used for
arguments not supplied by the user.

\code{subset_list} can be a list containing one or several named elements. Allowed
names are "band", "cell", and "year".
\itemize{
\item "year" can be used to return data for a subset of one or several years
included in the file.
\item "band" can be used to return data for a subset of one or several bands
included in the file. These can be specified either as integer indices or as
a character vector if bands are named.
\item "cell" can be used to return data for a subset of cells. Note that integer
indices start counting at 1, whereas character indices start counting at the
"firstcell" parameter (usually 0).
}
}
\examples{
\dontrun{
# Default with meta file. Reads meta information from "my_file.clm.json" and
# data from binary file linked to in "my_file.clm.json"
my_data <- read_io("my_file.clm.json")

# Read data from CLM file. This includes a header describing the file
# structure
my_data_clm <- read_io("my_file.clm", file_type = "clm")

# Suppose that "my_file.clm" has two bands containing data for "wheat" and
# "rice". Assign names to them.
my_data_clm <- read_io(
  "my_file.clm",
  file_type = "clm",
  band_names = c("wheat", "rice")
)

# Select only the "wheat" band during reading and discard the "rice" band.
# Also read only data for years 1910-1920
my_data_wheat <- read_io(
  "my_file.clm",
  file_type = "clm",
  band_names = c("wheat", "rice"),
  subset_list = list(band = "wheat", year = seq(1910, 1920))
)
}
}
