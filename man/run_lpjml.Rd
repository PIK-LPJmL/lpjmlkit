% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_lpjml.R
\name{run_lpjml}
\alias{run_lpjml}
\title{Run LPJmL}
\usage{
run_lpjml(
  x,
  model_path,
  output_path = NULL,
  parallel_cores = 1,
  write_stdout = FALSE
)
}
\arguments{
\item{x}{\link[tibble]{tibble} with at least \code{"sim_name"} defined as columns.
Runs as rows. Optional run parameters \code{"order"} and
\code{"dependency"} used for subsequent runs (see details)
\link[lpjmlkit]{write_config} returns a tibble in the required format.
OR provide a character string (vector) with the file name of a or
multiple generated ( \link[lpjmlkit]{write_config}) configuration file(s).}

\item{model_path}{character string providing the path to LPJmL
(equal to LPJROOT)}

\item{output_path}{character string - if \code{output_path} differs from
\code{model_path} - path where an output, a restart and a configuration
folder are created}

\item{parallel_cores}{integer defining the number of available CPU
cores/nodes for parallelization. Defaults to \code{1} (no parallelization). Please
note that parallelization is only supported for slurm jobs and not for
interactive runs}

\item{write_stdout}{logical. If TRUE \code{stdout} as well as \code{stderr} files are
written instead of printing it. Within a Slurm Job \code{write_stdout} is
automatically set to \code{TRUE}. Default is \code{FALSE}}
}
\value{
see \code{x}, extended with columns \code{"type"}, \code{"job_id"} and \code{"status"}
}
\description{
LPJmL is run using \code{"config_*.json"} files written by
\link[lpjmlkit]{write_config}. \link[lpjmlkit]{write_config} returns a tibble
that can be used as an input (see \code{x}). It serves the details to run single
or multiple (dependent/subsequent) model runs.
}
\details{
Supply a \link[tibble]{tibble} for \code{x} that has been generated by
\link[lpjmlkit]{write_config} and can look like the following examples:\tabular{l}{
   \strong{sim_name} \cr
   scen1_spinup \cr
   scen2_transient \cr
}


To perform subsequent or rather nested runs provide optional run parameters
\code{"order"} and \code{"dependency"} to the initial \link[tibble]{tibble} supplied as
\code{param} to \link[lpjmlkit]{write_config}\tabular{lrl}{
   \strong{sim_name} \tab \strong{order} \tab \strong{dependency} \cr
   scen1_spinup \tab 1 \tab NA \cr
   scen2_transient \tab 2 \tab scen1 _spinup \cr
}


As a shortcut it is also possible to provide the config file
\code{"config_*.json"} as a character string or multiple config files as a
character string vector directly as \code{x} to \code{run_lpjml}. \cr
Also be aware that the order of the supplied config files is important
(e.g. make sure the spin-up run is run before the transient one)
}
\examples{

\dontrun{
library(lpjmlkit)
library(tibble)

model_path <- "./LPJmL_internal"
output_path <-"./my_runs"

# basic usage
my_params1 <- tibble(
  sim_name = c("scen1", "scen2"),
  startgrid = c(27410, 27410)
  river_routing = c(FALSE, FALSE),
  random_seed = c(42, 404),
  pftpar.1.name = c("first_tree", NA),
  param.k_temp = c(NA, 0.03),
  new_phenology = c(TRUE, FALSE)
)

config_details1 <- write_config(my_params1, model_path, output_path)

 run_details1 <- run_lpjml(
  x = config_details1,
  model_path = model_path,
  output_path = output_path
)

run_details1
#   sim_name      job_id   status
#   <chr>           <int>  <chr>
# 1 scen1              NA  run
# 2 scen2              NA  run


# with run parameters dependency, order being set (also less other
#   parameters than in previous example)
my_params2 <- tibble(
  sim_name = c("scen1", "scen2"),
  startgrid = c(27410, 27410)
  river_routing = c(FALSE, FALSE),
  random_seed = c(42, 404),
  order = c(1, 2),
  dependency = c(NA, "scen1_spinup")
)

config_details2 <- write_config(my_params2, model_path, output_path)

run_details2 <- run_lpjml(config_details2, model_path, output_path)

run_details2
#   sim_name        order dependency   type       job_id   status
#   <chr>           <dbl> <chr>        <chr>      <chr>    <chr>
# 1 scen1_spinup        1 NA           simulation NA       run
# 2 scen1_transient     2 scen1_spinup simulation NA       run


# same but by using the pipe operator
run_details2 <- tibble(
  sim_name = c("scen1_spinup", "scen1_transient"),
  random_seed = as.integer(c(1, 42)),
  order = c(1, 2),
  dependency = c(NA, "scen1_spinup")
) \%>\%
  write_config(model_path, output_path) \%>\%
  run_lpjml(model_path, output_path)


# shortcut approaches
run_details3 <- run_lpjml(
  x = "./config_scen1_transient.json",
  model_path = model_path,
  output_path = output_path
)

run_details4 <- run_lpjml(
  c("./config_scen1_spinup.json", "./config_scen1_transient.json"),
  model_path,
  output_path
)

}

}
