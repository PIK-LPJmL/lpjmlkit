% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/submit_lpjml.R
\name{submit_lpjml}
\alias{submit_lpjml}
\title{Submit LPJmL}
\usage{
submit_lpjml(
  run_details,
  model_path,
  output_path = NULL,
  group = "lpjml",
  sclass = "short",
  ntasks = 256,
  wtime = "",
  blocking = ""
)
}
\arguments{
\item{run_details}{tibble with at least "sim_name" and "config_file"
defined as columns. Runs as rows. Optional pseudo parameters "order" and
"dependency" used for subsequent runs (see details). Hint:
\link[lpjmlKit]{write_config} returns a tibble in the required format}

\item{model_path}{character string providing the path to LPJmL
(equal to LPJROOT)}

\item{output_path}{character string - if output_path differs from
model_path - path where an output, a restart and a configuration
folder are created}

\item{group}{character string, provide a group for which the job is
submitted. Default is "lpjml"}

\item{sclass}{character string, define the job classification, for more
information have a look \href{https://www.pik-potsdam.de/en/institute/about/it-services/hpc/user-guides/slurm#section-5}{here}.
Defaults to "short".}

\item{ntasks}{integer, define the number of tasks/threads, for more
information have a look \href{https://www.pik-potsdam.de/en/institute/about/it-services/hpc/user-guides/slurm#section-18}{here}.}

\item{wtime}{character string, defining the time limit which can be an
advantage to get faster to the top of the (s)queue. For more information
have a look \href{https://www.pik-potsdam.de/en/institute/about/it-services/hpc/user-guides/slurm#section-18}{here}.}

\item{blocking}{integer, cores to be blocked. For more information
have a look \href{https://www.pik-potsdam.de/en/institute/about/it-services/hpc/user-guides/slurm#section-18}{here}.}
}
\value{
see \code{run_details}, extended with columns "job_id" and "status".
}
\description{
LPJmL runs are submitted to Slurm using config*.json files written by
\link[lpjmlKit]{write_config}. \code{write_config} returns a tibble that can be
used as an input (see \code{run_details}). It serves the details to submit sinlge
or multiple (dependent/subsequent) model runs.
}
\details{
Supply a \link[tibble]{tibble} (or data.frame) for \code{run_details} in the form
of (random example):\tabular{ll}{
   \strong{sim_name} \tab \strong{config_file} \cr
   scen1_spinup \tab config_scen1.json \cr
   scen2_transient \tab config_scen2.json \cr
}


To perform subsequent runs provide pseudo parameters order and dependency
as in the following example:\tabular{llrl}{
   \strong{sim_name} \tab \strong{config_file} \tab \strong{order} \tab \strong{dependency} \cr
   scen1_spinup \tab config_scen1.json \tab 1 \tab NA \cr
   scen2_transient \tab config_scen2.json \tab 2 \tab scen1 _spinup \cr
}
}
